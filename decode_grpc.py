# 导入我们刚刚编译好的“双向字典”模块
import course_detail_pb2


def decode_grpc_payload(hex_payload, message_type):
    """
    解码 gRPC 的十六进制负载。

    参数:
    hex_payload (str): 从抓包工具里复制的原始十六进制字符串。
    message_type (str): 要解码的消息类型，'request' 或 'response'。
    """
    try:
        # 1. 将十六进制字符串转换成原始的字节数据
        hex_payload = hex_payload.replace(' ', '')
        raw_bytes = bytes.fromhex(hex_payload)
        print(f"[*] 原始字节长度: {len(raw_bytes)}")

        # 2. 跳过 gRPC 的 5 字节头部
        if len(raw_bytes) < 5:
            print("[!] 错误: 负载太短，不足 5 字节头部。")
            return
        message_bytes = raw_bytes[5:]
        print(f"[*] 消息体字节长度: {len(message_bytes)}")

        # 3. 根据要解码的类型，创建不同的消息对象实例
        if message_type == 'request':
            message = course_detail_pb2.GetCourseCommentPageRequest()
            print("\n--- [ 正在解码 Request ] ---")
        elif message_type == 'response':
            message = course_detail_pb2.GetCourseCommentPageResponse()
            print("\n--- [ 正在解码 Response ] ---")
        else:
            print(f"[!] 错误: 未知的消息类型 '{message_type}'")
            return

        # 4. 解析消息体字节
        message.ParseFromString(message_bytes)

        # 5. 打印结果
        print("[ 解码成功! ]")
        print(message)
        print("--------------------")

    except Exception as e:
        print(f"[!] 解码失败: {e}")


# --- 主程序 ---
if __name__ == "__main__":
    # 这里放你的十六进制字符串，比如抓包复制的响应数据
    response_hex_payload = '00 00 00 06 98 0A 93 0D 0A AF 01 08 FA 1C 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 45 34 37 37 1A 04 45 34 37 37 1A 7B 0A 79 E6 97 A0 E6 95 8C E6 97 A0 E6 95 8C E6 97 A0 E6 95 8C EF BC 8C E8 AE B2 E7 9A 84 E5 8F 88 E5 A5 BD EF BC 8C E6 9C 9F E6 9C AB E8 80 83 E8 AF 95 E7 8B A0 E7 8B A0 E6 8D 9E EF BC 8C E6 8F 90 E7 A4 BA E4 BD A0 E9 83 BD E5 BF AB E6 8A 8A E7 AD 94 E6 A1 88 E5 96 82 E5 88 B0 E4 BD A0 E8 84 B8 E4 B8 8A EF BC 8C E7 BB 99 E6 88 91 E4 B8 80 E7 99 BE E5 88 86 F0 9F 92 AF 22 00 2A 02 08 05 3A 0C 08 8C 83 B3 C2 06 10 80 D8 83 8B 02 0A 6E 08 A0 0C 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 46 45 36 46 1A 04 46 45 36 46 1A 3E 0A 3C E7 8E 8B E7 89 A2 E5 B8 88 E7 BB 99 E4 BA 86 E6 BB A1 E6 98 8F EF BC 8C E7 A5 9E E4 B8 AD E7 A5 9E E7 A5 9E E4 B8 AD E7 A5 9E E7 A5 9E E4 B8 AD E7 A5 9E E7 A5 9E E4 B8 AD E7 A5 9E 22 00 3A 0C 08 FA C7 BA BB 06 10 80 D4 D4 AB 01 0A 80 01 08 FB 06 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 35 36 30 42 1A 04 35 36 30 42 1A 50 0A 4E E7 89 B9 E5 88 AB E5 96 9C E6 AC A2 E7 9A 84 E4 B8 80 E9 97 A8 E8 AF BE EF BC 8C E4 B8 8A E6 99 9A E8 AF BE E6 98 AF E6 9C 80 E6 94 BE E6 9D BE E7 9A 84 E6 97 B6 E5 88 BB EF BC 8C E4 B8 94 E4 B8 8A E4 B8 94 E7 8F 8D E6 83 9C E5 90 A7 22 00 3A 0C 08 FD D6 FD B4 06 10 C0 96 CC F0 02 0A C0 02 08 F7 06 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 34 46 33 42 1A 04 34 46 33 42 1A 8D 02 0A 8A 02 E8 80 81 E5 B8 88 E4 BA BA E7 89 B9 E5 88 AB E5 A5 BD EF BC 8C E4 B8 8A E8 AF BE E4 B9 9F E7 89 B9 E5 88 AB E6 9C 89 E8 B6 A3 EF BC 8C E8 83 BD E5 AD A6 E5 88 B0 E4 B9 90 E7 90 86 E7 9F A5 E8 AF 86 EF BC 8C E6 B2 A1 E6 9C 89 E7 AD BE E5 88 B0 EF BC 8C E6 9C 89 E5 B0 8F E6 B5 8B E8 AF 95 EF BC 88 E4 B8 89 E6 AC A1 EF BC 8C E4 B8 8D E8 AE A1 E5 88 86 E6 95 B0 EF BC 8C E4 B8 8D E7 AE 97 E8 80 83 E5 8B A4 EF BC 89 EF BC 8C E6 9C 9F E6 9C AB E8 80 83 E8 AF 95 E7 BB 9D E5 A4 A7 E5 A4 9A E6 95 B0 E9 83 BD E6 98 AF E5 B0 8F E6 B5 8B E8 AF 95 E5 8E 9F E9 A2 98 EF BC 88 E8 87 B3 E5 B0 91 38 38 E5 88 86 EF BC 8C E6 9C 89 E7 82 B9 E5 BF 98 E4 BA 86 EF BC 89 EF BC 8C E4 B8 94 E6 B5 8B E8 AF 95 E5 8E 9F E9 A2 98 E4 BC 9A E5 8F 91 E5 88 B0 E7 BE A4 E9 87 8C E4 BE 9B E5 A4 A7 E5 AE B6 E5 A4 8D E4 B9 A0 22 02 08 01 3A 0C 08 81 B1 FD B4 06 10 80 E7 FF DD 02 0A 6E 08 F5 04 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 33 39 38 35 1A 04 33 39 38 35 1A 3E 0A 3C E7 8E 8B E6 B8 8A E8 80 81 E5 B8 88 E7 A5 9E E4 B8 AD E7 A5 9E E4 B8 8D E5 BF 85 E5 A4 9A E8 A8 80 EF BC 8C E8 AE B2 E5 BE 97 E5 8F 88 E5 A5 BD E7 BB 99 E5 88 86 E5 8F 88 E5 A5 BD 22 00 3A 0C 08 AA D8 B7 B4 06 10 C0 A7 89 C2 01 0A 88 01 08 F1 04 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 37 37 45 39 1A 04 37 37 45 39 1A 59 0A 57 E8 80 81 E5 B8 88 E5 BE 88 E5 A5 BD EF BC 8C E8 AF BE E7 A8 8B E9 9A BE E5 BA A6 E4 B8 8D E7 AE 97 E5 A4 A7 EF BC 8C E5 B9 B3 E5 B8 B8 E6 9C 89 E4 B8 A4 E5 88 B0 E4 B8 89 E6 AC A1 E5 B0 8F E6 B5 8B EF BC 8C E6 9C 9F E6 9C AB E8 80 83 E8 AF 95 E7 BB 93 E9 A2 98 22 00 3A 0B 08 9F B5 B3 B4 06 10 80 E5 9A 77 0A 80 01 08 B6 04 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 44 31 36 37 1A 04 44 31 36 37 1A 50 0A 4E E7 BB 99 E5 88 86 E5 BE 88 E5 A5 BD EF BD 9E E4 B8 8D E7 AD BE E5 88 B0 E6 9C 89 E4 BA 8B E6 83 85 E5 8F AF E4 BB A5 E9 9A 8F E6 97 B6 E8 AF B7 E5 81 87 EF BC 8C E8 80 83 E6 A0 B8 E6 96 B9 E5 BC 8F E4 B9 9F E5 BE 88 E5 8F 8B E5 A5 BD 22 00 3A 0C 08 F4 DA A3 B4 06 10 80 B7 A5 AA 03 0A 86 01 08 A5 03 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 32 35 32 44 1A 04 32 35 32 44 1A 56 0A 54 E8 80 81 E5 B8 88 E4 B8 8A E8 AF BE E5 BE 88 E6 9C 89 E8 B6 A3 EF BC 8C E8 AF BE E5 A0 82 E6 B0 9B E5 9B B4 E5 A5 BD EF BC 8C E5 B9 B3 E6 97 B6 E6 9C 89 E5 B0 8F E6 B5 8B EF BC 8C E8 80 83 E8 AF 95 E7 BB 93 E8 AF BE EF BC 8C E7 89 B9 E5 88 AB E6 8D 9E 22 00 3A 0C 08 87 93 8E B4 06 10 80 D5 82 E2 01 0A 8E 02 08 9E 03 12 AC 01 0A 09 61 66 74 65 72 6D 61 74 68 12 9E 01 68 74 74 70 3A 2F 2F 74 68 69 72 64 71 71 2E 71 6C 6F 67 6F 2E 63 6E 2F 65 6B 5F 71 71 61 70 70 2F 41 51 50 6C 73 61 66 38 69 63 61 37 74 4B 41 4B 6D 73 56 52 37 68 74 4B 66 76 77 75 62 64 62 65 33 5A 69 61 46 74 62 69 61 31 69 61 69 61 6C 55 47 33 39 51 41 39 74 4D 38 64 7A 44 4D 75 4D 74 57 66 61 71 51 4D 71 79 4F 56 4C 4F 41 65 78 6C 33 53 62 54 5A 69 62 69 61 63 4D 72 51 41 4A 48 74 6B 41 6E 69 63 68 48 74 65 58 6A 57 77 62 4E 6F 49 41 62 46 53 57 59 51 4A 6F 2F 30 1A 49 0A 47 79 79 64 73 20 E9 83 BD E6 9D A5 E4 B8 8A E7 8E 8B E6 B8 8A E8 80 81 E5 B8 88 E7 9A 84 E8 AF BE EF BC 8C E5 BE 88 E6 9C 89 E6 84 8F E6 80 9D E8 80 81 E5 B8 88 E8 AE B2 E8 AF BE E5 BE 88 E6 9C 89 E6 BF 80 E6 83 85 22 00 30 01 3A 0B 08 94 D3 8D B4 06 10 80 AE 90 3B 0A 7D 08 F3 02 12 19 0A 11 E5 8C BF E5 90 8D E7 94 A8 E6 88 B7 2D 33 43 37 30 1A 04 33 43 37 30 1A 4D 0A 4B E9 9D 9E E5 B8 B8 E5 A5 BD EF BC 81 EF BC 81 EF BC 81 E7 8E 8B E6 B8 8A E8 80 81 E5 B8 88 E9 9D 9E E5 B8 B8 E9 9D 9E E5 B8 B8 E9 9D 9E E5 B8 B8 E5 A5 BD EF BC 88 E4 B8 8D E6 80 95 E6 8E 89 E8 AF BE E5 B0 B1 E5 86 B2 E5 90 A7 22 00 3A 0C 08 8E B2 84 B4 06 10 80 BD 95 88 02 1A 12 0A 0C 08 97 D1 DE C3 06 10 C0 A5 BF C9 02 10 01 18 0A 10 0C'



    decode_grpc_payload(response_hex_payload, 'response')
