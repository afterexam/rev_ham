syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// --- 枚举定义 ---
enum CourseDetailCourseCommentEnableState {
  COURSE_DETAIL_COURSE_COMMENT_ENABLE_STATE_NONE = 0;
  COURSE_DETAIL_COURSE_COMMENT_ENABLE_STATE_ENABLED = 1;
  COURSE_DETAIL_COURSE_COMMENT_ENABLE_STATE_DISABLED = 2;
}

enum CourseDetailCourseCommentLikeType {
  COURSE_DETAIL_COURSE_COMMENT_LIKE_TYPE_NONE = 0;
  COURSE_DETAIL_COURSE_COMMENT_LIKE_TYPE_LIKE = 1;
}

// --- 评论模块定义 ---

message CourseDetailCourseCommentAuthorInfo {
  string username = 1;
  string avatar_url = 2;
  string avatar_id_text = 3;
}

message CourseDetailCourseCommentBody {
  string content = 1;
}

message CourseDetailCourseCommentRateInfo {
  int32 star = 1;
}

message CourseDetailCourseCommentLikeInfo {
  int32 like_total = 1;
  CourseDetailCourseCommentLikeType self_like = 2;
}

message CourseDetailCourseCommentItem {
  int64 comment_id = 1;
  CourseDetailCourseCommentAuthorInfo author_info = 2;
  CourseDetailCourseCommentBody body = 3;
  CourseDetailCourseCommentLikeInfo like_info = 4;
  CourseDetailCourseCommentRateInfo rate_info = 5;
  bool self_comment = 6;
  google.protobuf.Timestamp create_time = 7;
}

message CourseDetailCourseCommentEnableInfo {
  repeated CourseDetailCourseCommentItem course_comment = 1;
  int32 total = 2;
}

message CourseDetailCourseCommentDisableInfo {
  string reason = 1;
}

message CourseDetailCourseCommentPageCursor {
  google.protobuf.Timestamp page_create_time = 1;
  int32 page_num = 2;
  int32 page_size = 3;
}

message CourseDetailCourseCommentPageInfo {
  repeated CourseDetailCourseCommentItem course_comment = 1;
  CourseDetailCourseCommentPageCursor page_cursor = 3;
}

message CourseDetailCourseCommentInfo {
  CourseDetailCourseCommentEnableState enable_state = 1;
  google.protobuf.Any data = 2;
}

message CourseDetailCourseCommentConfig {
  string comment_hint = 1;
  repeated DynamicConfigEntry dynamic_config = 2;

  message DynamicConfigEntry {
    string key = 1;
    string value = 2;
  }
}

message CreateCourseDetailCourseCommentBody {
  string content = 1;
}

message CreateCourseDetailCourseCommentRequest {
  string id = 1;
  CreateCourseDetailCourseCommentBody body = 4;
}

message CreateCourseDetailCourseCommentResponse {
  bool success = 1;
  string message = 2;
}

message LikeCourseCommentRequest {
  int32 comment_id = 1;
  bool like = 2;
}

message LikeCourseCommentResponse {}

// --- 课程详情主服务数据结构 ---

message CourseDetailCourseGradeStatInfo {}
message CourseDetailCourseRateInfo {}
message CourseDetailCreateReviewInfo {}
message CourseDetailSelfReviewInfo {}
message CourseDetailUIConfig {}

message GetCourseDetailRequest {
  string id = 1;
}

message GetCourseDetailResponse {
  CourseDetailCourseGradeStatInfo course_grade_stat_info = 1;
  CourseDetailCourseRateInfo rate_info = 2;
  CourseDetailCreateReviewInfo create_review_info = 3;
  CourseDetailCourseCommentInfo course_comment_info = 4;
  CourseDetailSelfReviewInfo self_review_info = 5;
  CourseDetailUIConfig ui_config = 1000;
}

message GetCourseDetailMatchRequest {
  string course_name = 1;
  string instructor = 2;
}

message GetCourseDetailMatchResponse {
  bool success = 1;
  optional string course_table_id = 2;
  optional GetCourseDetailResponse page = 3;
  string message = 4;
}

message GetCourseCommentPageRequest {
  string id = 1;
  CourseDetailCourseCommentPageCursor page_cursor = 2;
}

message GetCourseCommentPageResponse {
  CourseDetailCourseCommentPageInfo page_info = 1;
  int32 total = 2;
}

// --- 服务定义 ---

service CourseDetailService {
  rpc GetCourseDetailMatch(GetCourseDetailMatchRequest) returns (GetCourseDetailMatchResponse);
}

service GetCourseDetailCommentService {
  rpc GetCourseCommentPage(GetCourseCommentPageRequest) returns (GetCourseCommentPageResponse);
  rpc CreateCourseDetailCourseComment(CreateCourseDetailCourseCommentRequest) returns (CreateCourseDetailCourseCommentResponse);
  rpc LikeCourseComment(LikeCourseCommentRequest) returns (LikeCourseCommentResponse);
}
message LoginExtendInfo {
  string student_id_secret = 1;
}

message RefreshLoginRequest {
  string refresh_token = 1;
  LoginExtendInfo extend_info = 2;
}

message BasicUserInfo {
  string user_id = 1;
  string nickname = 2;
  string avatar_url = 3;
}

message RefreshLoginResponse {
  string token = 1;
  string refresh_token = 2;
  BasicUserInfo user_info = 3;
}

service LoginService {
  rpc DoRefreshLogin (RefreshLoginRequest) returns (RefreshLoginResponse);
}